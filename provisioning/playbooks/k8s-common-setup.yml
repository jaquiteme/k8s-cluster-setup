---
- name: Playbook for setting up K8s nodes (masters and workers)
  hosts: all
  become: true
  vars:
    k8s_version: 1.26.0-00
    k8s_releases_version: "{{ k8s_version[0:4] }}"
    k8s_required_packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - gpg
    k8s_packages:
      - kubeadm
      - kubelet
      - kubectl
  tasks:
    - name: Check if package manager is busy
      shell: "lsof /var/lib/dpkg/lock-frontend"
      register: result
      failed_when: not result.failed
      until: not result.failed
      retries: 5
      delay: 60

    - name: Installing required packages
      apt:
        name: "{{ k8s_required_packages }}"
        state: present
        update_cache: yes
      register: result
      until: result is success
      retries: 5
      delay: 30

    - name: Setting up containerd required modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Applying modprobe
      shell: modprobe overlay && modprobe br_netfilter

    - name: Setting up systcl conf
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Restarting systcl
      command: sysctl --system

    - name: Create keyrings folder if not exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755
        recurse: yes

    - name: Installing containerd.io
      block:
        - name: Adding docker gpg key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Adding docker apt repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable
            state: present
            filename: docker

        - name: Installing only containerd.io package
          apt:
            name: containerd.io
            state: present
            update_cache: yes

        # https://forum.linuxfoundation.org/discussion/862825/kubeadm-init-error-cri-v1-runtime-api-is-not-implemented
        - name: Removing default containerd.io config folder
          file:
            path: /etc/containerd/config.toml
            state: absent

        - name: Starting containerd service
          service:
            name: containerd
            state: started
            enabled: yes

    - name: Disabling swapp before process K8s installation
      block:
        - name: Remove all swap lines in /etc/fstab
          mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop:
            - swap
            - none

        - name: Disabling all swap
          command: swapoff -a
          when: ansible_swaptotal_mb > 0

    - name: Installing K8s packages
      block:
        - name: Getting K8s PGP v{{ k8s_releases_version }} repo release key and converting it to GPG key
          shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_releases_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"

        - name: Adding kubernetes v{{ k8s_releases_version }} apt repository
          apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_releases_version }}/deb/ /"
            state: present
            filename: kubernetes

        - name: Installing K8s packages
          apt:
            name: "{{ k8s_packages }}"
            state: present
            update_cache: yes
          notify: Restart containerd

        - name: Set containerd runtime 
          command: crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock
          notify: Restart containerd

        - name: Starting kubelet service
          service:
            name: kubelet
            state: started
            enabled: yes

  # HANDLERS
  # Restart Kubelet
  handlers:
    - name: Restart kubelet
      service:
        name: kubelet
        state: restarted
        enabled: yes
    # Restart containerd
    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: yes